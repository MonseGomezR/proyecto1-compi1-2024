
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.compiladores1.webappgc.analizador;

import java_cup.runtime.*;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 @Override
 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner.
     * @param s */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner.
     * @param s
     * @param sf */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\025\000\002\002\004\000\002\002\005\000\002\003" +
    "\004\000\002\003\003\000\002\004\006\000\002\005\005" +
    "\000\002\005\005\000\002\005\005\000\002\006\003\000" +
    "\002\007\003\000\002\010\003\000\002\011\006\000\002" +
    "\012\004\000\002\012\003\000\002\013\003\000\002\013" +
    "\003\000\002\014\012\000\002\022\012\000\002\016\005" +
    "\000\002\017\003\000\002\020\006" });

  /** Access to production table.
     * @return  */
 @Override
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\070\000\004\004\005\001\002\000\004\002\072\001" +
    "\002\000\004\006\010\001\002\000\006\005\071\006\010" +
    "\001\002\000\006\005\ufffe\006\ufffe\001\002\000\004\023" +
    "\011\001\002\000\010\030\013\031\014\032\012\001\002" +
    "\000\004\025\065\001\002\000\004\025\032\001\002\000" +
    "\004\025\017\001\002\000\004\007\016\001\002\000\006" +
    "\005\ufffd\006\ufffd\001\002\000\004\014\021\001\002\000" +
    "\004\007\ufffb\001\002\000\004\023\023\001\002\000\004" +
    "\007\ufff8\001\002\000\004\033\024\001\002\000\004\025" +
    "\025\001\002\000\004\035\026\001\002\000\004\026\027" +
    "\001\002\000\004\036\030\001\002\000\004\015\031\001" +
    "\002\000\010\007\ufff1\013\ufff1\014\ufff1\001\002\000\004" +
    "\012\034\001\002\000\004\007\ufff9\001\002\000\004\014" +
    "\041\001\002\000\004\007\ufffc\001\002\000\006\013\ufff4" +
    "\014\ufff4\001\002\000\006\013\052\014\041\001\002\000" +
    "\006\013\ufff2\014\ufff2\001\002\000\004\023\043\001\002" +
    "\000\006\013\ufff3\014\ufff3\001\002\000\006\033\024\037" +
    "\044\001\002\000\004\025\045\001\002\000\004\035\046" +
    "\001\002\000\004\026\047\001\002\000\004\036\050\001" +
    "\002\000\004\015\051\001\002\000\006\013\ufff0\014\ufff0" +
    "\001\002\000\004\016\054\001\002\000\006\013\ufff5\014" +
    "\ufff5\001\002\000\004\020\060\001\002\000\004\007\ufff6" +
    "\001\002\000\004\017\064\001\002\000\004\017\uffee\001" +
    "\002\000\004\022\061\001\002\000\004\037\062\001\002" +
    "\000\004\024\063\001\002\000\004\017\uffed\001\002\000" +
    "\004\007\uffef\001\002\000\004\012\034\001\002\000\004" +
    "\007\ufff7\001\002\000\004\007\ufffa\001\002\000\006\005" +
    "\uffff\006\uffff\001\002\000\004\002\000\001\002\000\004" +
    "\002\001\001\002" });

  /** Access to parse-action table.
     * @return  */
 @Override
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\070\000\004\002\003\001\001\000\002\001\001\000" +
    "\006\003\005\004\006\001\001\000\004\004\067\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\014\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\007\017\014" +
    "\021\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\006\034\011\032\001\001\000" +
    "\002\001\001\000\012\012\036\013\035\014\041\022\037" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\013" +
    "\052\014\041\022\037\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\016\054\001" +
    "\001\000\002\001\001\000\006\017\055\020\056\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\010\066\011\065\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
        System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
    } 

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido."); 
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= acciones EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // acciones ::= ACCIONES_OPEN acciones_body ACCIONES_CLOSE 
            {
              Object RESULT =null;
		 System.out.println("Entrando a Acciones"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("acciones",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // acciones_body ::= acciones_body accion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("acciones_body",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // acciones_body ::= accion 
            {
              Object RESULT =null;
		 System.out.println("Entrando a acciones_body"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("acciones_body",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // accion ::= ACCION_OPEN NOMBRE_OPEN tipo_accion ACCION_CLOSE 
            {
              Object RESULT =null;
		 System.out.println("Entrando a accion"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("accion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // tipo_accion ::= ACCION_NP GT accion_np 
            {
              Object RESULT =null;
		 System.out.println("tipo_accion_np"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_accion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // tipo_accion ::= ACCION_DP GT accion_bp 
            {
              Object RESULT =null;
		 System.out.println("tipo_accion_bp"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_accion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // tipo_accion ::= ACCION_MP GT accion_mp 
            {
              Object RESULT =null;
		 System.out.println("tipo_accion_mp"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_accion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // accion_np ::= parametros 
            {
              Object RESULT =null;
		 System.out.println("accion nueva pagina"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("accion_np",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // accion_bp ::= parametro_id 
            {
              Object RESULT =null;
		 System.out.println("accion borrar pagina"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("accion_bp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // accion_mp ::= parametros 
            {
              Object RESULT =null;
		 System.out.println("accion modificar pagina"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("accion_mp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // parametros ::= PARAMETROS_OPEN parametros_body PARAMETROS_CLOSE etiquetas 
            {
              Object RESULT =null;
		 System.out.println("entrando en parametros"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // parametros_body ::= parametros_body tipo_parametro 
            {
              Object RESULT =null;
		 System.out.println("parametro recursivo"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_body",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // parametros_body ::= tipo_parametro 
            {
              Object RESULT =null;
		 System.out.println("tipos parametros"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_body",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // tipo_parametro ::= parametro_id 
            {
              Object RESULT =null;
		 System.out.println("parametro id"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_parametro",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // tipo_parametro ::= parametro_otro 
            {
              Object RESULT =null;
		 System.out.println("parametro otro"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_parametro",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // parametro_id ::= PARAMETRO_OPEN NOMBRE_OPEN PR_ID GT L_LLAVE ID R_LLAVE PARAMETRO_CLOSE 
            {
              Object RESULT =null;
		 System.out.println("parametro"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_id",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // parametro_otro ::= PARAMETRO_OPEN NOMBRE_OPEN VALOR GT L_LLAVE ID R_LLAVE PARAMETRO_CLOSE 
            {
              Object RESULT =null;
		 System.out.println("parametro otro"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_otro",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // etiquetas ::= ETIQUETAS_OPEN etiquetas_body ETIQUETAS_CLOSE 
            {
              Object RESULT =null;
		 System.out.println("etiqueta"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiquetas",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // etiquetas_body ::= etiqueta 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiquetas_body",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // etiqueta ::= ETIQUETA_OPEN VALOR_OPEN VALOR XML_TAG_CLOSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiqueta",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
